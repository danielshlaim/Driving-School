// <auto-generated />
using System;
using Driving_School.DB.DrivingSchoolClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Driving_School.DB.Migrations
{
    [DbContext(typeof(DrivingSchoolContext))]
    partial class DrivingSchoolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Driving_School.DB.DrivingSchoolClasses.DriveCourse", b =>
                {
                    b.Property<int>("CoursesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Courses_Id")
                        .UseIdentityColumn();

                    b.Property<int>("DrivingInstructorId")
                        .HasColumnType("int")
                        .HasColumnName("Driving_instructor_Id");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int")
                        .HasColumnName("History_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfLessones")
                        .HasColumnType("int")
                        .HasColumnName("Number_Of_Lessones");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("CoursesId");

                    b.HasIndex("HistoryId");

                    b.ToTable("Drive_Courses");
                });

            modelBuilder.Entity("Driving_School.DB.DrivingSchoolClasses.DrivingInstructor", b =>
                {
                    b.Property<int>("DrivingInstructorsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Driving_instructors_Id")
                        .UseIdentityColumn();

                    b.Property<int>("CoursesId")
                        .HasColumnType("int")
                        .HasColumnName("Courses_Id");

                    b.Property<int>("DrivingInstructorIdentityNumber")
                        .HasColumnType("int")
                        .HasColumnName("Driving_instructor_IdentityNumber");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("First_Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("Phone_Number");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DrivingInstructorsId");

                    b.HasIndex("CoursesId");

                    b.ToTable("Driving_instructors");

                    b.HasData(
                        new
                        {
                            DrivingInstructorsId = 1,
                            CoursesId = 0,
                            DrivingInstructorIdentityNumber = 0,
                            Email = "gilnotok@gmail.com",
                            FirstName = "gil",
                            LastName = "alkobi",
                            Password = "124126",
                            PhoneNumber = 0,
                            UserName = "gilgul"
                        });
                });

            modelBuilder.Entity("Driving_School.DB.DrivingSchoolClasses.History", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("History_Id")
                        .UseIdentityColumn();

                    b.Property<int>("CoursesId")
                        .HasColumnType("int")
                        .HasColumnName("Courses_Id");

                    b.Property<int>("DrivingInstructorId")
                        .HasColumnType("int")
                        .HasColumnName("Driving_instructor_Id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("Student_Id");

                    b.HasKey("HistoryId");

                    b.HasIndex("CoursesId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("Driving_School.DB.DrivingSchoolClasses.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Student_Id")
                        .UseIdentityColumn();

                    b.Property<int>("CoursesId")
                        .HasColumnType("int")
                        .HasColumnName("Courses_Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("First_Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("Phone_Number");

                    b.Property<int>("StudentIdentityNumber")
                        .HasColumnType("int")
                        .HasColumnName("Student_IdentityNumber");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CoursesId = 0,
                            Email = "yoy@gmail.com",
                            FirstName = "yakov",
                            LastName = "lulu",
                            Password = "123123",
                            PhoneNumber = 0,
                            StudentIdentityNumber = 0,
                            UserName = "yasha111"
                        });
                });

            modelBuilder.Entity("Driving_School.DB.DrivingSchoolClasses.DriveCourse", b =>
                {
                    b.HasOne("Driving_School.DB.DrivingSchoolClasses.History", "History")
                        .WithMany("DriveCourses")
                        .HasForeignKey("HistoryId")
                        .HasConstraintName("FK_Drive_Courses_History");

                    b.Navigation("History");
                });

            modelBuilder.Entity("Driving_School.DB.DrivingSchoolClasses.DrivingInstructor", b =>
                {
                    b.HasOne("Driving_School.DB.DrivingSchoolClasses.DriveCourse", "Courses")
                        .WithMany("DrivingInstructors")
                        .HasForeignKey("CoursesId")
                        .HasConstraintName("FK_Driving_instructors_Drive_Courses")
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Driving_School.DB.DrivingSchoolClasses.History", b =>
                {
                    b.HasOne("Driving_School.DB.DrivingSchoolClasses.DriveCourse", "Courses")
                        .WithMany("Histories")
                        .HasForeignKey("CoursesId")
                        .HasConstraintName("FK_History_Drive_Courses")
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Driving_School.DB.DrivingSchoolClasses.DriveCourse", b =>
                {
                    b.Navigation("DrivingInstructors");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("Driving_School.DB.DrivingSchoolClasses.History", b =>
                {
                    b.Navigation("DriveCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
